trigger:
  branches:
    include:
      - main

pool:
  name: DefaultWorld

variables:
  # serviceConnection: ${serviceConnection}  # <-- update
  # webAppName: ${webAppName}               # <-- update
  buildConfiguration: 'Release'
  projectPath: 'api/api.csproj'
  clientPath: '.' # Angular project is in the repo root
  distSubFolder: 'world-xi' # value in angular.json "outputPath"

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - checkout: self
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
    - script: |
        dotnet restore $(projectPath)
        dotnet publish $(projectPath) -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/publish
      displayName: Restore & Publish

    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'

    - script: |
        npm ci --prefix $(clientPath)
        npm run build --prefix $(clientPath)
      displayName: Build Angular

    # Copy Angular dist into published wwwroot
    - powershell: |
        $srcRoot = "$(Build.SourcesDirectory)"
        $clientPath = "$(clientPath)"
        $distSub  = "$(distSubfolder)"
        $publish  = "$(Build.ArtifactStagingDirectory)\publish\wwwroot"

        $distRoot = Join-Path $srcRoot $clientPath
        $distRoot = Join-Path $distRoot "dist"

        Write-Host "Looking for Angular dist here:"
        Write-Host "  $distRoot"
        if ($distSub -ne "") {
          $candidate1 = Join-Path $distRoot $distSub        # dist/<app-name>
          $candidate2 = Join-Path $candidate1 "browser"     # dist/<app-name>/browser (Angular 16+)
        } else {
          $candidate1 = $distRoot                           # dist/
          $candidate2 = Join-Path $distRoot "browser"       # dist/browser (rare)
        }

        Write-Host "Candidate paths:"
        Write-Host "  $candidate2"
        Write-Host "  $candidate1"

        if (Test-Path $candidate2) {
          $finalDist = $candidate2
        } elseif (Test-Path $candidate1) {
          $finalDist = $candidate1
        } else {
          Write-Host "Contents of dist for debugging:"
          Get-ChildItem -Recurse -Force $distRoot | Select-Object FullName,Length,LastWriteTime | Format-Table -AutoSize
          throw "Could not find Angular build output. Expected: $candidate2 or $candidate1"
        }

        Write-Host "Copying from: $finalDist"
        Write-Host "Copying to:   $publish"

        New-Item -ItemType Directory -Force -Path $publish | Out-Null
        robocopy $finalDist $publish /E /NFL /NDL /NJH /NJS /NP
        if ($LASTEXITCODE -gt 7) { exit $LASTEXITCODE } else { exit 0 }
      displayName: Copy Angular dist to wwwroot

    # Zip & publish artifact
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/publish'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/drop.zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'

- stage: Deploy
  dependsOn: Build
  jobs:
  - deployment: DeployWeb
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(serviceConnection)'
              appName: '$(webAppName)'
              appType: webApp
              package: '$(Pipeline.Workspace)/drop/drop.zip'
