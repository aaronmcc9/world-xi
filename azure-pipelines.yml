trigger:
  branches:
    include:
      - main

pool:
  name: DefaultWorld   # your self-hosted agent pool

variables:
  buildConfiguration: 'Release'
  projectPath: 'api/api.csproj'
  clientPath: '.'   # Angular project is at repo root (angular.json in /)

stages:
- stage: Build
  displayName: Build
  jobs:
  - job: Build
    displayName: Build & Package
    steps:
    - checkout: self

    # ----- .NET restore/publish -----
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.x'

    - script: |
        echo === DOTNET RESTORE/PUBLISH ===
        dotnet --info
        dotnet restore $(projectPath)
        dotnet publish $(projectPath) -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/publish
      displayName: Restore & Publish .NET

    # ----- EF Core: generate idempotent migration script -----
    - powershell: |
        Write-Host "=== Install dotnet-ef and generate idempotent script ==="
        # Ensure dotnet-ef is available on PATH (handles Windows/Linux agents)
        dotnet tool install --global dotnet-ef --version 8.*
        $toolRoot = if ($env:USERPROFILE) { Join-Path $env:USERPROFILE ".dotnet\tools" } else { Join-Path $env:HOME ".dotnet/tools" }
        $env:PATH = "$toolRoot;$env:PATH"

        # Generate a single script that safely applies only missing migrations
        dotnet ef migrations script `
          --idempotent `
          --project "$(projectPath)" `
          --startup-project "$(projectPath)" `
          -o "$(Build.ArtifactStagingDirectory)\ef-migrations.sql"

        Write-Host "Generated: $(Build.ArtifactStagingDirectory)\ef-migrations.sql"
      displayName: Generate EF migration script (idempotent)

    # ----- Angular build -----
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'

    - script: |
        echo === NPM CI @ %CD% ===
        npm ci
      displayName: NPM CI (Angular)
      workingDirectory: '$(Build.SourcesDirectory)'

    # Uses local @angular/cli via package.json "build": "ng build"
    - script: |
        echo === NPM RUN BUILD (production) @ %CD% ===
        npm run build -- --configuration production
      displayName: Build Angular (npm run build)
      workingDirectory: '$(Build.SourcesDirectory)'

    # ----- Copy Angular dist into API publish/wwwroot -----
    - powershell: |
        $srcRoot = "$(Build.SourcesDirectory)"
        $publish = "$(Build.ArtifactStagingDirectory)\publish\wwwroot"
        $dist    = Join-Path $srcRoot "dist\world-xi"
        $browser = Join-Path $dist "browser"

        Write-Host "=== Checking Angular dist folders ==="
        Write-Host "Expect: $browser (Angular 16+), else $dist"
        if (Test-Path $browser) { $final = $browser }
        elseif (Test-Path $dist) { $final = $dist }
        else {
          Write-Host "No dist found. Tree under dist/ for diagnostics:"
          if (Test-Path (Join-Path $srcRoot "dist")) {
            Get-ChildItem -Recurse -Force (Join-Path $srcRoot "dist") |
              Select-Object FullName,Length,LastWriteTime | Format-Table -AutoSize
          } else {
            Write-Host "dist/ does not exist at $(Join-Path $srcRoot 'dist')"
          }
          throw "Angular build output not found at dist/world-xi[/browser]."
        }

        Write-Host "Copying from: $final"
        Write-Host "Copying to:   $publish"
        New-Item -ItemType Directory -Force -Path $publish | Out-Null
        robocopy $final $publish /E /NFL /NDL /NJH /NJS /NP
        if ($LASTEXITCODE -gt 7) { exit $LASTEXITCODE } else { exit 0 }
      displayName: Copy Angular dist to wwwroot

    # ----- Package artifact -----
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/publish'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/drop.zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'

- stage: Deploy
  displayName: Deploy to App Service
  dependsOn: Build
  jobs:
  - deployment: DeployWeb
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          # ----- Apply EF migrations to Azure SQL using Entra ID token (no password) -----
          - task: AzureCLI@2
            displayName: Apply EF migrations to Azure SQL (Entra token)
            inputs:
              azureSubscription: '$(serviceConnection)'   # same service connection used for App Service
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                Write-Host "=== Installing SqlServer PowerShell module (if needed) ==="
                try { Import-Module SqlServer -ErrorAction Stop } catch { Install-Module SqlServer -Scope CurrentUser -Force; Import-Module SqlServer }

                $sqlFile = "$(Pipeline.Workspace)/drop/ef-migrations.sql"
                if (-not (Test-Path $sqlFile)) {
                  throw "Migration script not found at $sqlFile (did the Build stage publish it?)"
                }

                Write-Host "=== Getting Entra ID access token for Azure SQL ==="
                $token = az account get-access-token --resource https://database.windows.net/ --query accessToken -o tsv

                Write-Host "=== Running migration script against $(sqlServer) / $(sqlDatabase) ==="
                Invoke-Sqlcmd `
                  -ServerInstance "$(sqlServer)" `
                  -Database "$(sqlDatabase)" `
                  -AccessToken $token `
                  -InputFile $sqlFile `
                  -QueryTimeout 1200  # 20 minutes for big migrations

                Write-Host "=== EF migrations applied ==="

          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(serviceConnection)'
              appName: '$(webAppName)'
              appType: 'webApp'
              package: '$(Pipeline.Workspace)/drop/drop.zip'
