trigger:
  branches:
    include:
      - main

pool:
  name: DefaultWorld

variables:
  # serviceConnection: ${serviceConnection}  # <-- update
  # webAppName: ${webAppName}               # <-- update
  buildConfiguration: 'Release'
  projectPath: 'api/api.csproj'
  clientPath: '.' # Angular project is in the repo root
  distSubFolder: 'world-xi' # value in angular.json "outputPath"

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - checkout: self
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
    - script: |
        dotnet restore $(projectPath)
        dotnet publish $(projectPath) -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/publish
      displayName: Restore & Publish

    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'

    - script: |
        npm ci --prefix $(clientPath)
        npm run build --prefix $(clientPath)
      displayName: Build Angular

    # Copy Angular dist into published wwwroot
    - powershell: |
        $srcRoot    = "$(Build.SourcesDirectory)"
        $clientPath = "$(clientPath)"
        $publish    = "$(Build.ArtifactStagingDirectory)\publish\wwwroot"
    
        # 1) Locate and parse angular.json
        $angPath = Join-Path (Join-Path $srcRoot $clientPath) "angular.json"
        if (!(Test-Path $angPath)) {
          throw "angular.json not found at $angPath. Set variables.clientPath correctly."
        }
    
        Write-Host "Reading angular.json from: $angPath"
        $json = Get-Content $angPath -Raw | ConvertFrom-Json
    
        # 2) Find the first project that has a build->options->outputPath
        $projects = $json.projects | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name
        $outputPath = $null
        foreach ($p in $projects) {
          $proj = $json.projects.$p
          $op   = $proj.architect.build.options.outputPath
          if ($op) { $outputPath = $op; $projectName = $p; break }
        }
    
        if (-not $outputPath) {
          throw "Could not find build.options.outputPath in angular.json"
        }
    
        # 3) Resolve the absolute dist path
        if ([System.IO.Path]::IsPathRooted($outputPath)) {
          $distAbs = $outputPath
        } else {
          $distAbs = Join-Path (Join-Path $srcRoot $clientPath) $outputPath
        }
    
        # 4) Prefer .../browser if it exists (Angular 16+), else use outputPath
        $browserPath = Join-Path $distAbs "browser"
        if (Test-Path $browserPath) {
          $finalDist = $browserPath
        } elseif (Test-Path $distAbs) {
          $finalDist = $distAbs
        } else {
          Write-Host "DEBUG: Listing dist parent for diagnostics:"
          Get-ChildItem -Recurse -Force (Split-Path $distAbs -Parent) | 
            Select-Object FullName,Length,LastWriteTime | Format-Table -AutoSize
          throw "Built dist folder not found. Expected: $browserPath or $distAbs"
        }
    
        Write-Host "Angular project: $projectName"
        Write-Host "Resolved outputPath: $outputPath"
        Write-Host "Copying from: $finalDist"
        Write-Host "Copying to:   $publish"
    
        New-Item -ItemType Directory -Force -Path $publish | Out-Null
        robocopy $finalDist $publish /E /NFL /NDL /NJH /NJS /NP
        if ($LASTEXITCODE -gt 7) { exit $LASTEXITCODE } else { exit 0 }
      displayName: Copy Angular dist to wwwroot


    # Zip & publish artifact
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/publish'
        includeRootFolder: false
        archiveType: zip
        archiveFile: '$(Build.ArtifactStagingDirectory)/drop.zip'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'

- stage: Deploy
  dependsOn: Build
  jobs:
  - deployment: DeployWeb
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(serviceConnection)'
              appName: '$(webAppName)'
              appType: webApp
              package: '$(Pipeline.Workspace)/drop/drop.zip'
